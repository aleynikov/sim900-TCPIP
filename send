#!/usr/bin/env python3
import argparse
import logging
import re
import time

import serial


def run():
    args = _parse_cmd_args()

    verbosity_level = args.verbose
    _setup_logging(verbosity_level)

    ser = serial.Serial(
        port='/dev/ttyAMA0',
        baudrate=args.baud_rate,
        parity=serial.PARITY_NONE,
        stopbits=serial.STOPBITS_ONE,
        bytesize=serial.EIGHTBITS,
        timeout=1
    )

    # Instructions: https://vsblogs.wordpress.com/2013/11/28/tcp-connection-over-gprs-using-sim900-and-at-commands/

    ser_write(ser, b'AT+CIPSHUT\n')
    wait_until(ser, b'SHUT OK\r\n')

    ser_write(ser, b'AT+CIPMUX=0\n')
    wait_until(ser, b'OK\r\n')

    ser_write(ser, format_bytes('AT+CSTT="{apn_name}","{apn_username}","{apn_password}"\n',
                                apn_name=args.apn_name, apn_username=args.apn_username, apn_password=args.apn_password))
    wait_until(ser, b'OK\r\n')

    ser_write(ser, b'AT+CIICR\n')
    wait_until(ser, b'OK\r\n')

    # This seems to be necessary.
    ser_write(ser, b'AT+CIFSR\n')
    wait_until_pattern(ser, r'\d{1,3}.\d{1,3}.\d{1,3}')

    ser_write(ser, format_bytes('AT+CIPSTART="TCP","{host}","{port}"\n', host=args.host, port=args.port))
    time.sleep(10)
    wait_until(ser, b'CONNECT OK\r\n')

    ser_write(ser, b'AT+CIPSEND\n')
    wait_until(ser, b'> ')

    ser_write(ser, format_bytes('{message}\x1a', message=args.message))
    wait_until(ser, b'SEND OK\r\n')

    ser_write(ser, b'AT+CIPSHUT\n')
    wait_until(ser, b'SHUT OK\r\n')


def format_bytes(text, **kwargs):
    return bytes(text.format(**kwargs), 'ASCII')


def wait_until(serial_connection: serial.Serial, expected_response: bytes):
    logging.debug("Waiting for: %s", expected_response)
    sleep_time = (8.0 * len(expected_response)) / serial_connection.baudrate
    while True:
        response = ser_readline(serial_connection)
        if response == expected_response:
            return
        time.sleep(sleep_time)


def wait_until_pattern(serial_connection: serial.Serial, expected_pattern: str):
    logging.debug("Waiting for: %s", expected_pattern)
    sleep_time = (8.0 * len(expected_pattern)) / serial_connection.baudrate
    while True:
        response = ser_readline(serial_connection)
        if re.search(expected_pattern, str(response)) is not None:
            return
        time.sleep(sleep_time)


def ser_write(serial_connection: serial.Serial, payload: bytes):
    serial_connection.write(payload)
    logging.debug("Sent: %s", payload)


def ser_readline(serial_connection: serial.Serial):
    text = serial_connection.readline()
    logging.debug("Received: %s", text)
    return text


def _setup_logging(verbosity_level):
    logging_level = logging.WARN
    if verbosity_level == 1:
        logging_level = logging.INFO
    elif verbosity_level >= 2:
        logging_level = logging.DEBUG
    logging.basicConfig(level=logging_level, format='%(levelname)s: %(message)s')


def _parse_cmd_args():
    parser = argparse.ArgumentParser(description='Sends a message to a host over GPRS via a SIM900A module connected '
                                                 'to the serial port.')

    parser.add_argument('host', type=str, help='The host to which to send the message.')
    parser.add_argument('port', type=int, help='The port on which to send the message.')
    parser.add_argument('message', type=str, help='The port on which to send the message.')

    parser.add_argument('--verbose', '-v', action='count', default=0, help='Verbosity level. By default only warnings '
                                                                           'and errors are printed.')

    parser.add_argument('--serial-device', default='/dev/ttyAMA0', type=str,
                        help='The serial device to connect to. For example: /dev/ttyAMA0.')
    parser.add_argument('--baud-rate', default=9600, help='The baud rate of communication between the host and the'
                                                          'SIM900A module.')

    parser.add_argument('--apn-name', required=True, type=str, help='The name of your network\'s access point.')
    parser.add_argument('--apn-username', required=True, type=str,
                        help='The username to use when connecting to your network\'s access point.')
    parser.add_argument('--apn-password', type=str, default="",
                        help='The password to use when connecting to your network\'s access point.')
    return parser.parse_args()


if __name__ == '__main__':
    run()
